if [ "`ps -o command 1 | tail -n 1 | ( read c o; echo ${o} )`" = "-s" ]; then
	echo "==> Running in single-user mode"
	SINGLE_USER="true"
	kenv boot_mute="NO"
        sh
fi

set -x 

# kldload /boot/kernel/tmpfs.ko # TODO: must not be gzipped so that this works here?
mount -t tmpfs tmpfs /tmp
chmod 1777 /tmp # TODO: Check if really needed by FreeBSD 13

mdconfig -a -t vnode -o readonly -f /boot/rootfs.uzip

mount -t tmpfs tmpfs /media
chmod 1777 /media # TODO: Check if really needed by FreeBSD 13

mkdir -p /media/uzip

# kldload /boot/kernel/geom_uzip.ko # TODO: must not be gzipped so that this works here?
mount -t ufs -o ro /dev/md0.uzip /media/uzip

kldload /media/uzip/boot/kernel/nullfs.ko
mount -t nullfs /media/uzip/System /System
mount -t nullfs /media/uzip/Applications /Applications
mount -t nullfs /media/uzip/bin /bin
mount -t nullfs /media/uzip/lib /lib
mount -t nullfs /media/uzip/libexec /libexec
mount -t tmpfs tmpfs /nvidia # Must be writable for initgfx
mount -t nullfs /media/uzip/sbin /sbin
mount -t nullfs /media/uzip/usr /usr
# mount -t nullfs /media/uzip/etc /etc
mount -t nullfs /media/uzip/boot /boot

kldload /media/uzip/boot/kernel/unionfs.ko

mount -t tmpfs tmpfs /root # does slim need this?

mount -t tmpfs tmpfs /var
cp -R /media/uzip/var/ /var
mkdir -p /var/run # Needed for slim?
# mount -t unionfs -o below /media/uzip/var /var # TODO: Check: Crashes later on when slim starts? 

# The following does not instantly crash but since I get a crash later on, 
# I suspect this causes it?
# mount -t unionfs -o below /media/uzip/var /var
# mkdir -p /var/run || echo "XXXXXXXXXXXXXXXX FAIL YYYYYYYYYYYYY"

mount -t tmpfs tmpfs /usr/local
mount -t unionfs -o below /media/uzip/usr/local /usr/local

# /etc, needed for networking
cp -R /media/uzip/etc /tmp
mount -t tmpfs tmpfs /etc
mount -t nullfs /tmp/etc /etc
# cp -R /tmp/etc /etc
# mv /tmp/etc/* /etc/
# rm -r /tmp/etc # TODO later

# FIXME: The following also gives instant reboot. Why?
# mkdir -p /tmp/unionfs/etc
# mount -o noatime -t unionfs /tmp/unionfs/etc /etc

# Add liveuser, this also creates a writable $HOME from skel
mount -t tmpfs tmpfs /home
mkdir -p /home/liveuser/Desktop
pw useradd liveuser -u 1000 \
-c "Live User" -d "/home/liveuser" \
-g wheel -G operator -m -s /usr/local/bin/zsh -k /usr/share/skel -w none
chown -R liveuser /home/liveuser
pw groupmod wheel -m liveuser
pw groupmod video -m liveuser
pw groupmod webcamd -m liveuser
pw groupmod cups -m liveuser

######################################################################
# From here on optional, helloSystem specific optimizations
######################################################################

# Do not launch Welcome in Live mode
mkdir -p /home/liveuser/.config/hello/
touch /home/liveuser/.config/hello/.helloSetupDone
chown -R liveuser /usr/home/liveuser/.config

# TODO: Check whether boot_mute is set and if it is not, then do this?
# Log the WHOLE verbose output of the helloDesktop session to a logfile
# Only use this selectively during development
sed -i '' -e 's|# This script is intended to be invoked by a desktop file|exec 1>>/tmp/start-hello.log 2>\&1\nset -x|g' /usr/local/bin/start-hello

# Prevent /tmp and /var from being overwritten later in the boot process
# FIXME: Disabling these fails because 'service ... disable' does not find them. Side effect of chrooting?
# Outright deleting them messes up rcorder,
# So we are replacing them with dummy files that do nothing
# but offer the PROVIDEs that other rc scripts are using
cat > /etc/rc.d/tmp << \EOF
#!/bin/sh
# PROVIDE: tmp
# REQUIRE: mountcritremote
EOF
cat > /etc/rc.d/cleartmp << \EOF
#!/bin/sh
# PROVIDE: cleartmp
# REQUIRE: mountcritremote tmp
# BEFORE: DAEMON
EOF
cat > /etc/rc.d/cleanvar << \EOF
# PROVIDE: cleanvar
# REQUIRE: var
EOF
cat > /etc/rc.d/var << \EOF
# PROVIDE: var
# REQUIRE: mountcritlocal
EOF

# Set hostname other than the default based on SMBIOS information
hostname $(kenv -q "smbios.system.product" | xargs | sed -e 's| |-|g')
# Prevent hostname from being overwritten later in the boot process
cat > /etc/rc.d/hostname << \EOF
# PROVIDE: hostname
# REQUIRE: FILESYSTEMS
# BEFORE:  netif
EOF

# Log to boot.log; FIXME: does not work yet. Why?
# sed -i '' -e 's|1>>/dev/null|1>>/var/log/boot.log|g' /etc/rc

# TODO: Consider moving this elsewhere. Could be done later in the boot process
/usr/sbin/sysrc -f /etc/rc.conf sendmail_enable="NO" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf sendmail_submit_enable="NO" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf sendmail_outbound_enable="NO" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf sendmail_msp_queue_enable="NO" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf linux_enable="YES" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf dbus_enable="YES" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf kld_list+="cuse ig4 iicbus iichid utouch asmc" >/dev/null 2>/dev/null
/usr/sbin/sysrc -f /etc/rc.conf allscreens_kbdflags="-b quiet.off" >/dev/null 2>/dev/null

# Change rcorder so that the desktop gets loaded as fast as possible
# The intended order is:
# live -> ldconfig -> dbus -> initgfx -> localize -> slim -> everything else

# Allow ldconfig to run immediately after live
sed -i '' -e 's|# REQUIRE: .*|# REQUIRE: live|g' /etc/rc.d/ldconfig

# Allow dbus to run immediately after ldconfig
sed -i '' -e 's|# REQUIRE: .*|REQUIRE: ldconfig|g' /usr/local/etc/rc.d/dbus

# Allow initgfx to run immediately after dbus
sed -i '' -e 's|# REQUIRE: .*|# REQUIRE: dbus|g' /etc/rc.d/initgfx

# Allow localize to run immediately after initgfx
sed -i '' -e 's|# REQUIRE: .*|# REQUIRE: initgfx|g' /usr/local/etc/rc.d/localize

# Allow slim to run immediately after initgfx
sed -i '' -e 's|# REQUIRE: .*|# REQUIRE: initgfx|g' /usr/local/etc/rc.d/slim

# Force slim to run before var # TODO: See if it can work even earlier than that
sed -i '' -e 's|# REQUIRE: .*|# BEFORE: var|g' /usr/local/etc/rc.d/slim

# For debugging: After applying the above patches, show resulting rcorder with
# rcorder /etc/rc.d/* /usr/local/etc/rc.d/*

exit 0
